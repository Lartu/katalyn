def isspace;
    in $char: $_[1];
    print($_);
    if len($char);
        if $char :: " \t\n";
            return 1;
        ok;
    ok;
    return 0;
ok;

def array;
    return $_;
ok;

def arr;
    return $_;
ok;

def in_array;
    in $needle: $_[1];
    in $haystack: $_[2];
    in $i: 1;
    while $haystack[$i];
        if $haystack[$i] = $needle;
            return $i;
        ok;
        in $i: $i + 1;
    ok;
    return 0;
ok;

def ceil;
    return floor($_[1]) + 1;
ok;

def append;
    in $table: $_[1];
    in $table[len($_[1]) + 1]: $_[2];
    return $table;
ok;

def split;
    in $string: $_[1];
    in $separator: $_[2];
    in $max_split: -1;
    if $_[3];
        in $max_split: $_[3];
    ok;
    in $token: "";
    in $tokens: table;
    if len($string) < len($separator);
        return append($tokens, $string);
    ok;
    in $i: 1;
    while substr($string, $i, len($separator));
        in $result: 0;
        if $_r = $separator;
            in $result: $_r;
            in $i: $i + len($separator);
            if len($token);
                append($tokens, $token);
                in $token: "";
                if len($tokens) = $max_split;
                    append($tokens, substr($string, $i));
                    break;
                ok;
            ok;
            continue;
        ok;
        if !$result;
            in $token: $token & substr($string, $i, 1);
        ok;
        in $i: $i + 1;
    ok;
    if len($token);
        append($tokens, $token);
    ok;
    return $tokens;
ok;

def init_table;
    in $table: table;
    in $i: 1;
    in $key: "";
    while is($_[$i]);
        in $token: $_[$i];
        if $i % 2 = 1;
            in $key: $token;
        ok;
        if $i % 2 = 0;
            in $table[$key]: $token;
        ok;
        in $i: $i + 1;
    ok;
    return $table;
ok;

def join;
    in $result: "";
    in $i: 1;
    while is($_[$i]);
        in $token: $_[$i];
        in $result: $result & $token;
        in $i: $i + 1;
    ok;
    return $result;
ok;

def arrjoin;
    if len($_) = 0;
        return "";
    ok;
    in $result: "";
    in $tokens: $_[1];
    in $separator: "";
    if is($_[2]);
        in $separator: $_[2];
    ok;
    in $i: 1;
    while is($tokens[$i]);
        in $result: $result & $separator & $tokens[$i];
        in $i: $i + 1;
    ok;
    return substr($result, len($separator) + 1);
ok;

def index;
    in $haystack: $_[1];
    in $needle: $_[2];
    if len($haystack) < len($needle);
        return 0;
    ok;
    in $i: 1;
    while substr($haystack, $i, len($needle));
        if $_r = $needle;
            return $i;
        ok;
        in $i: $i + 1;
    ok;
    return 0;
ok;
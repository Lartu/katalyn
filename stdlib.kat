in $true: 1;
in $false: 0;

def array;
    return $_;
ok;

def arr;
    return $_;
ok;

def in_array;
    in $needle: $_[1];
    in $haystack: $_[2];
    in $i: 1;
    while $haystack[$i];
        if $haystack[$i] = $needle;
            return $i;
        ok;
        in $i: $i + 1;
    ok;
    return 0;
ok;

def ceil;
    return floor($_[1]) + 1;
ok;

def append;
    in $table: $_[1];
    in $table[len($_[1]) + 1]: $_[2];
    return $table;
ok;

def split;
    in $string: $_[1];
    in $separator: $_[2];
    in $max_split: -1;
    if is($_[3]);
        in $max_split: $_[3];
    ok;
    in $skip_empty: $false;
    if is($_[4]);
        in $skip_empty: $_[4];
    ok;
    print("Skipping empty: ", $skip_empty);
    in $token: "";
    in $tokens: table;
    if len($string) < len($separator);
        return append($tokens, $string);
    ok;
    in $i: 1;
    while substr($string, $i, len($separator));
        in $result: 0;
        if $_r = $separator;
            in $result: $_r;
            in $i: $i + len($separator);
            if !$skip_empty || len($token);
                append($tokens, $token);
                in $token: "";
                if len($tokens) = $max_split;
                    append($tokens, substr($string, $i));
                    break;
                ok;
            ok;
            continue;
        ok;
        unless $_r;
            in $token: $token & substr($string, $i, 1);
        ok;
        in $i: $i + 1;
    ok;
    if !$skip_empty || len($token);
        append($tokens, $token);
    ok;
    return $tokens;
ok;

def init_table;
    in $table: table;
    in $i: 1;
    in $key: "";
    while is($_[$i]);
        in $token: $_[$i];
        if $i % 2 = 1;
            in $key: $token;
        ok;
        if $i % 2 = 0;
            in $table[$key]: $token;
        ok;
        in $i: $i + 1;
    ok;
    return $table;
ok;

def join;
    in $result: "";
    in $i: 1;
    while is($_[$i]);
        in $token: $_[$i];
        in $result: $result & $token;
        in $i: $i + 1;
    ok;
    return $result;
ok;

def arrjoin;
    if len($_) = 0;
        return "";
    ok;
    in $result: "";
    in $tokens: $_[1];
    in $separator: "";
    if is($_[2]);
        in $separator: $_[2];
    ok;
    in $i: 1;
    while is($tokens[$i]);
        in $result: $result & $separator & $tokens[$i];
        in $i: $i + 1;
    ok;
    return substr($result, len($separator) + 1);
ok;

def index;
    in $haystack: $_[1];
    in $needle: $_[2];
    if len($haystack) < len($needle);
        return 0;
    ok;
    in $i: 1;
    while substr($haystack, $i, len($needle));
        if $_r = $needle;
            return $i;
        ok;
        in $i: $i + 1;
    ok;
    return 0;
ok;

def starts_with;
    in $string: $_[1];
    in $prefix: $_[2];
    if len($prefix) > len($string);
        return $false;
    ok;
    return substr($string, 1, len($prefix)) = $prefix;
ok;

def ends_with;
    in $string: $_[1];
    in $prefix: $_[2];
    if len($prefix) > len($string);
        return $false;
    ok;
    return substr($string, -len($prefix), len($prefix)) = $prefix;
ok;

def is_whitespace;
    in $string: $_[1];
    return len($string) && $string :: "\n\t ";
ok;

def ltrim;
    in $string: $_[1];
    in $trim_ws: $true;
    if is($_[2]);
        in $trim_ws: $false;
        in $needle: $_[2];
    ok;
    (* If trimming whitespace *)
    if $trim_ws;
        in $i: 1;
        while $i <= len($string);
            if !is_whitespace(substr($string, $i, 1));
                break;
            ok;
            in $i: $i + 1;
        ok;
        return substr($string, $i);
    ok;
    (* If trimming text *)
    unless $_r;
        if len($needle) > len($string);
            return $string;
        ok;
        in $i: 1;
        while $i + len($needle) - 1 <= len($string);
            if substr($string, $i, len($needle)) <> $needle;
                break;
            ok;
            in $i: $i + len($needle);
        ok;
        return substr($string, $i);
    ok;
ok;

def rtrim;
    in $string: $_[1];
    in $trim_ws: $true;
    if is($_[2]);
        in $trim_ws: $false;
        in $needle: $_[2];
    ok;
    (* If trimming whitespace *)
    if $trim_ws;
        in $i: len($string);
        while $i >= 1;
            if !is_whitespace(substr($string, $i, 1));
                break;
            ok;
            in $i: $i - 1;
        ok;
        return substr($string, 0, $i);
    ok;
    (* If trimming text *)
    unless $_r;
        if len($needle) > len($string);
            return $string;
        ok;
        in $i: (len($string) - len($needle)) + 1;
        while $i >= 1;
            if substr($string, $i, len($needle)) <> $needle;
                in $i: $i + len($needle) - 1;
                break;
            ok;
            in $i: $i - len($needle);
        ok;
        return substr($string, 1, $i);
    ok;
ok;

def trim;
    in $string: $_[1];
    if is($_[2]);
        return rtrim(ltrim($string, $_[2]), $_[2]);
    ok;
    return rtrim(ltrim($string));
ok;
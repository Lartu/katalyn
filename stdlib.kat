in $true: 1;
in $false: 0;

def arr;
(** Returns an array table containing all the arguments passed to the function ($_). **)
    return $_;
ok;

def array;
(** Returns an array table containing all the arguments passed to the function ($_). **)
    return $_;
ok;

def in_array;
(** Returns if $_[1] is found in the array table $_[2]. **)
    in $needle: $_[1];
    in $haystack: $_[2];
    in $i: 1;
    while $haystack[$i];
        if $haystack[$i] = $needle;
            return $i;
        ok;
        in $i: $i + 1;
    ok;
    return 0;
ok;

def print_arr;
(** Prints an array, sorted. **)
    in $array: $_[1];
    in $i: 1;
    printc("(");
    until $i > len($array);
        printc($array[$i]);
        $i: $i + 1;
        unless $i > len($array);
            printc(", ");
        ok;
    ok;
    print(")");
ok;

def ceil;
(** Rounds $_[1] to the nearest higher integer. **)
    return floor($_[1]) + 1;
ok;

def append;
(** Appends the value $_[2] to the array table $_[1] (in-place) and returns said table. **)
    in $table: $_[1];
    in $table[len($_[1]) + 1]: $_[2];
    return $table;
ok;

def split;
(** Splits the string $_[1] by the separator in $_[2].
If the number $_[3] is set, the string is split at most $_[3] times. -1 means no max bound.
If $_[4] is set and it's true, empty values resulted from the split are not added to the resulting table.
Returns an array table containing the result of the splitting. **)
    if len($_) < 1;
        print("split(...) expects at one parameter.");
        exit(1);
    ok;
    in $string: $_[1];
    if len($_) < 2;
        in $separator: "";
    ok; unless $_r;
        in $separator: $_[2];
    ok;
    in $max_split: -1;
    if is($_[3]);
        in $max_split: $_[3];
    ok;
    in $skip_empty: $false;
    if is($_[4]);
        in $skip_empty: $_[4];
    ok;
    in $token: "";
    in $tokens: table;
    if len($string) < len($separator);
        return append($tokens, $string);
    ok;
    in $i: 1;
    if $separator = "";
        while $i <= len($string);
            append($tokens, $string[$i]);
            in $i: $i + 1;
        ok;
        return $tokens;
    ok;
    while substr($string, $i, len($separator));
        in $result: 0;
        if $_r = $separator;
            in $result: $_r;
            in $i: $i + len($separator);
            if !$skip_empty || len($token);
                append($tokens, $token);
                in $token: "";
                if len($tokens) = $max_split;
                    append($tokens, substr($string, $i));
                    break;
                ok;
            ok;
            continue;
        ok;
        unless $_r;
            in $token: $token & substr($string, $i, 1);
        ok;
        in $i: $i + 1;
    ok;
    if !$skip_empty || len($token);
        append($tokens, $token);
    ok;
    return $tokens;
ok;

def init_table;
(** Returns an table with the alternating values passed to the function as key-value pairs.
For example calling init_table("a", "b", "c", "d") will return the value containing the keys
"a" and "c" so that table{a} is "b" and table{c} is "d". **)
    in $table: table;
    in $i: 1;
    in $key: "";
    while is($_[$i]);
        in $token: $_[$i];
        if $i % 2 = 1;
            in $key: $token;
        ok;
        if $i % 2 = 0;
            in $table[$key]: $token;
        ok;
        in $i: $i + 1;
    ok;
    return $table;
ok;

def join;
(** Returns its parameters joined as a string. **)
    in $result: "";
    in $i: 1;
    while is($_[$i]);
        in $token: $_[$i];
        in $result: $result & $token;
        in $i: $i + 1;
    ok;
    return $result;
ok;

def arrjoin;
(** Joins the array table $_[1] using $_[2] as a delimiter. If $_[2] is not set, it defaults to "". **)
    if len($_) = 0;
        return "";
    ok;
    in $result: "";
    in $tokens: $_[1];
    in $separator: "";
    if is($_[2]);
        in $separator: $_[2];
    ok;
    in $i: 1;
    while is($tokens[$i]);
        in $result: $result & $separator & $tokens[$i];
        in $i: $i + 1;
    ok;
    return substr($result, len($separator) + 1);
ok;

def join_with;
(** Returns its parameters joined as a string using the first parameter as the joiner. **)
    in $result: "";
    in $joiner: $_[1];
    in $i: 2;
    while is($_[$i]);
        in $token: $_[$i];
        in $j: "";
        if $i > 2;
            $j: $joiner;
        ok;
        in $result: $result & $j & $token;
        in $i: $i + 1;
    ok;
    return $result;
ok;

def index;
(** Searches for the value $_[2] in the array table $_[1]. If it's found, returns its index. Otherwise returns 0. **)
    in $haystack: $_[1];
    in $needle: $_[2];
    if len($haystack) < len($needle);
        return 0;
    ok;
    in $i: 1;
    while substr($haystack, $i, len($needle));
        if $_r = $needle;
            return $i;
        ok;
        in $i: $i + 1;
    ok;
    return 0;
ok;

def replace_slow;
(** Replaces all instances of the string $_[2] in the string $_[1] by $_[3]. **)
    in $haystack: $_[1];
    in $needle: $_[2];
    in $replacement: $_[3];
    if len($haystack) < len($needle);
        return $haystack;
    ok;
    $parsed_text: "";
    $buffer: "";
    for $haystack;
        $char: $haystack[$_r];
        $buffer: $buffer & $char;
        if len($buffer) = len($needle);
            if $buffer = $needle;
                $parsed_text: $parsed_text & $replacement;
                $buffer: "";
            else;
                $parsed_text: $parsed_text & $buffer[1];
                $buffer: substr($buffer, 2);
            ok;
        ok;
    ok;
    $parsed_text: $parsed_text & $buffer;
    return $parsed_text;
ok;

def starts_with;
(** Returns true if the string $_[1] starts with the string $_[2]. **)
    in $string: $_[1];
    in $prefix: $_[2];
    if len($prefix) > len($string);
        return $false;
    ok;
    return substr($string, 1, len($prefix)) = $prefix;
ok;

def ends_with;
(** Returns true if the string $_[1] ends with the string $_[2]. **)
    in $string: $_[1];
    in $prefix: $_[2];
    if len($prefix) > len($string);
        return $false;
    ok;
    return substr($string, -len($prefix), len($prefix)) = $prefix;
ok;

def is_whitespace;
(** Returns true if the string $_[1] is one or more whitespace characters. An empty string is considered whitespace. **)
    in $string: $_[1];
    if !len($string);
        return $true;
    elif len($string) = 1;
        return $string :: "\n\t ";
    else;
        in $i: 1;
        while $i <= len($string);
            if !($string[$i] :: "\n\t ");
                return $false;
            ok;
            in $i: $i + 1;
        ok;
    ok;
    return $true;
ok;

def ltrim;
(** Left-trims the string $_[1]. If $_[2] is set, it trims the value in $_[2]. Otherwise it trims whitespace. **)
    in $string: $_[1];
    in $trim_ws: $true;
    if is($_[2]);
        in $trim_ws: $false;
        in $needle: $_[2];
    ok;
    (* If trimming whitespace *)
    if $trim_ws;
        in $i: 1;
        while $i <= len($string);
            if !is_whitespace(substr($string, $i, 1));
                break;
            ok;
            in $i: $i + 1;
        ok;
        return substr($string, $i);
    ok;
    (* If trimming text *)
    unless $_r;
        if len($needle) > len($string);
            return $string;
        ok;
        in $i: 1;
        while $i + len($needle) - 1 <= len($string);
            if substr($string, $i, len($needle)) <> $needle;
                break;
            ok;
            in $i: $i + len($needle);
        ok;
        return substr($string, $i);
    ok;
ok;

def rtrim;
(** Right-trims the string $_[1]. If $_[2] is set, it trims the value in $_[2]. Otherwise it trims whitespace. **)
    in $string: $_[1];
    in $trim_ws: $true;
    if is($_[2]);
        in $trim_ws: $false;
        in $needle: $_[2];
    ok;
    (* If trimming whitespace *)
    if $trim_ws;
        in $i: len($string);
        while $i >= 1;
            if !is_whitespace(substr($string, $i, 1));
                break;
            ok;
            in $i: $i - 1;
        ok;
        return substr($string, 0, $i);
    ok;
    (* If trimming text *)
    unless $_r;
        if len($needle) > len($string);
            return $string;
        ok;
        in $i: (len($string) - len($needle)) + 1;
        while $i >= 1;
            if substr($string, $i, len($needle)) <> $needle;
                in $i: $i + len($needle) - 1;
                break;
            ok;
            in $i: $i - len($needle);
        ok;
        return substr($string, 1, $i);
    ok;
ok;

def trim;
(** Left and right-trims the string $_[1]. If $_[2] is set, it trims the value in $_[2]. Otherwise it trims whitespace. **)
    in $string: $_[1];
    if is($_[2]);
        return rtrim(ltrim($string, $_[2]), $_[2]);
    ok;
    return rtrim(ltrim($string));
ok;

def prototype;
(** Creates a shallow copy of object $_[1] and returns it. **)
    $base_object: $_[1];
    $copy_object: table;
    for $base_object;
        $copy_object[$_r]: $base_object[$_r];
    ok;
    return $copy_object;
ok;

def printcs;
(** Prints comma separated values **)
    print(arrjoin($_, ", "));
ok;

def shift_arr;
(** Shifts the array $_[1] a number of $_[2] times to the left. For example, if [a, b, c] is shifted one
time, it becomes [b, c, a]. If it's shifted twice, it becomes [c, a, b]. **)
    $array: $_[1];
    $max: len($array);
    $count: $_[2] % $max;
    if $count <= 0;
        return;
    ok;
    until $count = 0;
        $index: 1;
        $swap: $array[1];
        while $index < $max;
            $array[$index]: $array[$index + 1];
            $index: $index + 1;
        ok;
        $array[$max]: $swap;
        $count: $count - 1;
    ok;
ok;

def ucasec;
    $letters:   "abcdefghijklmnopqrstuvwxyz";
    $letters_u: "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    $index: 1;
    while $index <= len($letters);
        if $letters[$index] = $_[1];
            return $letters_u[$index];
        ok;
        $index: $index + 1;
    ok;
    return $_[1];
ok;

def lcasec;
    $letters:   "abcdefghijklmnopqrstuvwxyz";
    $letters_u: "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    $index: 1;
    while $index <= len($letters);
        if $letters_u[$index] = $_[1];
            return $letters[$index];
        ok;
        $index: $index + 1;
    ok;
    return $_[1];
ok;

def ucase;
    $index: 1;
    $buffer: "";
    while $index <= len($_[1]);
        $buffer: $buffer & ucasec($_[1][$index]);
        $index: $index + 1;
    ok;
    return $buffer;
ok;

def lcase;
    $index: 1;
    $buffer: "";
    while $index <= len($_[1]);
        $buffer: $buffer & lcasec($_[1][$index]);
        $index: $index + 1;
    ok;
    return $buffer;
ok;

def ucasefirst;
    $index: 2;
    $buffer: "";
    if len($_[1]) >= 1;
        $buffer: ucasec($_[1][1]);
    ok;
    while $index <= len($_[1]);
        $buffer: $buffer & lcasec($_[1][$index]);
        $index: $index + 1;
    ok;
    return $buffer;
ok;

def title;
    $index: 1;
    $buffer: "";
    $last_char_space: $true;
    while $index <= len($_[1]);
        $char: $_[1][$index];
        if is_whitespace($char);
            $last_char_space: $true;
            $buffer: $buffer & $char;
        elif !$last_char_space;
            $buffer: $buffer & lcasec($_[1][$index]);
        else;
            $buffer: $buffer & ucasec($_[1][$index]);
            $last_char_space: $false;
        ok;
        $index: $index + 1;
    ok;
    return $buffer;
ok;